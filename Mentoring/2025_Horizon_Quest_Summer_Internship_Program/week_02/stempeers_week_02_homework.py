# -*- coding: utf-8 -*-
"""stempeers_week_02_homework.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L1RMIjjGWsp5BTfcMfahZKAOdAovTrgg

# Week 2 Homework: Python Fundamentals for AI/ML - 10 Questions
**Due Date:** [Insert Date]  
**Total Points:** 100 points (10 points each)

---

## Instructions
- Complete all questions with clear, commented code
- Test your code before submitting
- Submit as a Python file (.py) or Jupyter notebook (.ipynb)
- Show your output/results for each question

---

## Question 1: Basic File Operations (10 points)

Write a program that:
1. Creates a text file called `my_grades.txt`
2. Writes your name and 5 subject grades to the file (one per line)
3. Reads the file back and prints the contents
4. Calculates and prints your average grade

**Example Output:**
```
John Smith
Math: 85
Science: 92
English: 78
History: 88
Art: 95
Average Grade: 87.6
```

---

## Question 2: Simple Student Class (10 points)

Create a `Student` class with:
- Properties: `name`, `age`, `grades` (list of numbers)
- Methods:
  - `add_grade(grade)`: adds a grade to the list
  - `get_average()`: returns the average of all grades
  - `get_letter_grade()`: returns A (90+), B (80-89), C (70-79), D (60-69), or F (<60)

**Test your class:**
```python
student = Student("Alice", 16, [85, 90, 78])
student.add_grade(88)
print(f"Average: {student.get_average()}")
print(f"Letter Grade: {student.get_letter_grade()}")
```

---

## Question 3: Reading CSV with Pandas (10 points)

Given a CSV file with student data (or create your own with 10 students):
```
Name,Age,Math,Science,English
Alice,16,85,90,88
Bob,17,78,82,85
...
```

Write code to:
1. Read the CSV file using pandas
2. Display the first 3 rows
3. Show basic information about the dataset (number of rows, columns, data types)
4. Calculate the average score for each subject
5. Find the student with the highest total score

---

## Question 4: Basic Data Visualization (10 points)

Using the student data from Question 3, create:

1. **Bar chart** showing average scores by subject (using matplotlib)
2. **Histogram** of Math scores (using matplotlib)
3. **Scatter plot** of Math vs Science scores (using matplotlib)

Requirements:
- Add proper titles and labels to all plots
- Use different colors for each plot
- Display all three plots in a single figure with subplots

---

## Question 5: Simple Data Filtering (10 points)

Using pandas and the student dataset:

1. Find all students who scored above 85 in Math
2. Find students who are 17 years old
3. Find students who scored above 80 in ALL subjects
4. Create a new column called `Total_Score` (sum of Math, Science, English)
5. Sort students by Total_Score in descending order

Print the results for each step with clear labels.

---

## Question 6: Basic Data Analysis (10 points)

Write functions to analyze student data:

```python
def analyze_subject(df, subject_name):
    '''
    Analyze a specific subject's performance
    Print: highest score, lowest score, average, number of students above 80
    '''
    # Your code here

def compare_ages(df):
    '''
    Compare performance between age groups
    Print: average total score for each age
    '''
    # Your code here
```

Test your functions with the student dataset and explain what the results tell you.

---

## Question 7: File Writing with Results (10 points)

Create a program that:

1. Reads student data from a CSV file
2. Calculates each student's average score
3. Determines their letter grade (A, B, C, D, F)
4. Writes a new CSV file called `student_report.csv` with columns:
   - Name, Age, Average_Score, Letter_Grade
5. Also creates a text file `class_summary.txt` with:
   - Total number of students
   - Class average
   - Number of students in each letter grade category

---

## Question 8: Simple Data Grouping (10 points)

Using the student dataset:

1. Group students by age and calculate:
   - Average Math score for each age group
   - Count of students in each age group
2. Create a simple bar chart showing average Math scores by age
3. Print which age group performs best in Math

**Hint:** Use `df.groupby('Age')['Math'].mean()`

---

## Question 9: Data Cleaning Basics (10 points)

Create a dataset with some problems and fix them:

1. **Create messy data:**
   ```python
   messy_data = {
       'Name': ['Alice', 'Bob', 'Charlie', 'Alice', 'Diana'],  # Alice appears twice
       'Math': [85, 90, '', 88, 92],  # Empty string in data
       'Age': [16, 17, 16, 16, 18]
   }
   ```

2. **Clean the data by:**
   - Removing duplicate rows
   - Handling missing/empty values (replace with average or remove)
   - Converting data types if needed

3. **Show before and after:**
   - Print original data shape and problems found
   - Print cleaned data and summary

---

## Question 10: Mini Project - Grade Book (10 points)

Create a simple grade book system:

1. **Create a class called `GradeBook`:**
   ```python
   class GradeBook:
       def __init__(self):
           self.students = []  # List to store student data
       
       def add_student(self, name, age):
           # Add a new student
           
       def add_grade(self, student_name, subject, grade):
           # Add a grade for a specific student and subject
           
       def get_student_average(self, student_name):
           # Return average grade for a student
           
       def get_class_average(self):
           # Return average grade for entire class
           
       def save_to_file(self, filename):
           # Save all data to a CSV file
   ```

2. **Test your grade book:**
   - Add 3 students
   - Add grades for Math, Science, English for each student
   - Print each student's average
   - Print class average
   - Save data to a file
   - Create a simple bar chart showing each student's average

---

## Sample Data for Testing

If you need sample data, create a CSV with this structure:
```csv
Name,Age,Math,Science,English
Alice,16,85,90,88
Bob,17,78,82,85
Charlie,16,92,88,90
Diana,18,88,95,87
Eve,17,90,85,92
Frank,16,82,78,83
Grace,18,95,92,94
Henry,17,87,89,86
Ivy,16,89,91,88
Jack,17,84,86,89
```

---

## Grading Criteria

**Each question will be graded on:**
- **Correctness (7 points):** Does your code work and produce correct results?
- **Code Quality (2 points):** Is your code readable with good variable names?
- **Output (1 point):** Did you show the results clearly?

---

## Tips for Success

1. **Start simple:** Get basic functionality working first
2. **Test frequently:** Run your code often to catch errors early
3. **Use meaningful variable names:** `student_name` is better than `x`
4. **Add comments:** Explain what your code does
5. **Ask for help:** If you're stuck, ask questions!

**Remember:** The goal is to learn and practice. Don't worry about making it perfect - focus on understanding the concepts!

---

## Submission Format

Create a single Python file or Jupyter notebook with:
- Clear section headers for each question
- Your code with comments
- Output/results for each question
- Any observations or explanations

**Good luck! ðŸš€**
"""

